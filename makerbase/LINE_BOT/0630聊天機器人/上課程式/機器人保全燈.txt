
#include<LWiFi.h>
#include <PubSubClient.h>
char ssid[] = "your ssid";      //  your network SSID (name)
char pass[] = "your password";  // your network password (use for WPA, or use as key for WEP)
int keyIndex = 0;               // your network key Index number (needed only for WEP)
int status = WL_IDLE_STATUS;
WiFiClient client;
int R=5,G=4,B=3;
/******************************************/
#define trigPin 13
#define echoPin 12
int lock;
int piezoPin = 11; 
int su=0;
/*************************** Sketch Code ************************************/
char load[256];
/***************************************************************************/
PubSubClient upload(client);
void callback(char* topic, byte* payload, unsigned int length) {
  /*****1*****/
  if (strcmp(topic, "your mqtt topic") == 0) {

    Serial.print("Message arrived [");
    Serial.print(topic);
    Serial.print("] ");
    for (int i = 0; i < length; i++) {
      Serial.print((char)payload[i]);
       load[i]=payload[i];
    }
    Serial.println();
      if(atoi(load)==1){
       lock=1;
       digitalWrite(R, HIGH);  
       digitalWrite(G, LOW);  
       digitalWrite(B, HIGH);    
    }
      else if(atoi(load)==0){
         lock=0;
         su=0;
         digitalWrite(R, LOW);  
         digitalWrite(G, LOW);  
         digitalWrite(B, LOW);   
         noTone(piezoPin);
     }
  }
}
void reconnect() {
  // Loop until we're reconnected
  while (!upload.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (upload.connect("linelock")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      upload.subscribe("your mqtt topic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(upload.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
   pinMode(trigPin, OUTPUT);
   pinMode(echoPin, INPUT);
   pinMode(R, OUTPUT);
   pinMode(G, OUTPUT);
   pinMode(B, OUTPUT); 
   digitalWrite(R, LOW);  
   digitalWrite(G, LOW);  
   digitalWrite(B, LOW);  
   pinMode(piezoPin,OUTPUT);
   noTone(piezoPin); 
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    status = WiFi.begin(ssid, pass);
  }
  Serial.println("Connected to wifi");
  printWifiStatus();

  upload.setServer("iot.eclipse.org", 1883);
  upload.setCallback(callback);
}

void loop() {
  if (!upload.connected()) {
    reconnect();
  }
  upload.loop();

  long duration, distance;
  digitalWrite(trigPin, LOW);  
  delayMicroseconds(2); 
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10); 
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.1;
  Serial.print("distance = ");   Serial.print(distance);  Serial.println("cm ");
  delay(1000); 

  if((lock==1)&&(distance<4)){
    su=1;
    upload.publish("your mqtt topic","1");
    digitalWrite(R, LOW);  
    digitalWrite(G, HIGH);  
    digitalWrite(B, HIGH);  
    
  }
 if(su==1){
  tone(piezoPin, 1000, 100);
  delay(200);
  tone(piezoPin, 1000, 100);
  delay(200); 
  tone(piezoPin, 1000, 100);
  delay(200);
  tone(piezoPin, 1000, 100);
  noTone(piezoPin); 
  delay(1000);
 }

   
}

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}