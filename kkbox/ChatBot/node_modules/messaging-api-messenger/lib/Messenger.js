'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var _formData = require('form-data');var _formData2 = _interopRequireDefault(_formData);
var _warning = require('warning');var _warning2 = _interopRequireDefault(_warning);
var _invariant = require('invariant');var _invariant2 = _interopRequireDefault(_invariant);
var _isPlainObject = require('is-plain-object');var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
var _lodash = require('lodash.omit');var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


















function validateQuickReplies(quickReplies) {
  // quick_replies is limited to 11
  (0, _invariant2.default)(
  Array.isArray(quickReplies) && quickReplies.length <= 11,
  'quick_replies is an array and limited to 11');


  quickReplies.forEach(quickReply => {
    if (quickReply.content_type === 'text') {
      // title has a 20 character limit, after that it gets truncated
      (0, _invariant2.default)(
      quickReply.title.trim().length <= 20,
      'title of quick reply has a 20 character limit, after that it gets truncated');


      // payload has a 1000 character limit
      (0, _invariant2.default)(
      quickReply.payload.length <= 1000,
      'payload of quick reply has a 1000 character limit');

    }
  });
}

function createMessage(
msg,
options = {})
{
  const message = _extends({},
  msg);


  if (
  options.quick_replies &&
  Array.isArray(options.quick_replies) &&
  options.quick_replies.length >= 1)
  {
    validateQuickReplies(options.quick_replies);
    message.quick_replies = options.quick_replies;
  }

  return message;
}

function createText(
text,
options = {})
{
  return createMessage({ text }, options);
}

function createMessageFormData(
payload,
filedata,
options = {})
{
  const message = _extends({},
  payload);


  if (options.quick_replies) {
    validateQuickReplies(options.quick_replies);
    message.quick_replies = options.quick_replies;
  }

  const formdata = new _formData2.default();

  formdata.append('message', JSON.stringify(message));
  formdata.append('filedata', filedata, (0, _lodash2.default)(options, ['quick_replies']));

  return formdata;
}

function createAttachment(
attachment,
options = {})
{
  return createMessage(
  {
    attachment },

  options);

}

function createAttachmentFormData(attachment, filedata, options) {
  return createMessageFormData(
  {
    attachment },

  // $FlowFixMe
  filedata,
  options);

}

function createAudio(
audio,
options = {})
{
  const attachment = {
    type: 'audio',
    payload: {} };

  if (typeof audio === 'string') {
    attachment.payload.url = audio;
    return createAttachment(attachment, options);
  }
  if (audio && (0, _isPlainObject2.default)(audio)) {
    attachment.payload = audio;
    return createAttachment(attachment, options);
  }

  return createAttachmentFormData(attachment, audio, options);
}

function createImage(
image,
options = {})
{
  const attachment = {
    type: 'image',
    payload: {} };

  if (typeof image === 'string') {
    attachment.payload.url = image;
    return createAttachment(attachment, options);
  }
  if (image && (0, _isPlainObject2.default)(image)) {
    attachment.payload = image;
    return createAttachment(attachment, options);
  }

  return createAttachmentFormData(attachment, image, options);
}

function createVideo(
video,
options = {})
{
  const attachment = {
    type: 'video',
    payload: {} };

  if (typeof video === 'string') {
    attachment.payload.url = video;
    return createAttachment(attachment, options);
  }
  if (video && (0, _isPlainObject2.default)(video)) {
    attachment.payload = video;
    return createAttachment(attachment, options);
  }

  return createAttachmentFormData(attachment, video, options);
}

function createFile(
file,
options = {})
{
  const attachment = {
    type: 'file',
    payload: {} };

  if (typeof file === 'string') {
    attachment.payload.url = file;
    return createAttachment(attachment, options);
  }
  if (file && (0, _isPlainObject2.default)(file)) {
    attachment.payload = file;
    return createAttachment(attachment, options);
  }

  return createAttachmentFormData(attachment, file, options);
}

function createTemplate(
payload,
options = {})
{
  return createAttachment(
  {
    type: 'template',
    payload },

  options);

}

function createButtonTemplate(
text,
buttons,
options = {})
{
  return createTemplate(
  {
    template_type: 'button',
    text,
    buttons },

  options);

}

function createGenericTemplate(
elements,
options =


{})
{
  return createTemplate(
  {
    template_type: 'generic',
    elements,
    image_aspect_ratio: options.image_aspect_ratio || 'horizontal' },

  options);

}

function createListTemplate(
elements,
buttons,
options =


{})
{
  return createTemplate(
  {
    template_type: 'list',
    elements,
    buttons,
    top_element_style: options.top_element_style || 'large' },

  options);

}

function createOpenGraphTemplate(
elements,
options = {})
{
  return createTemplate(
  {
    template_type: 'open_graph',
    elements },

  options);

}

function createMediaTemplate(
elements,
options = {})
{
  return createTemplate(
  {
    template_type: 'media',
    elements },

  options);

}

function createReceiptTemplate(
attrs,
options = {})
{
  return createTemplate(_extends({

    template_type: 'receipt' },
  attrs),

  options);

}

function createAirlineBoardingPassTemplate(
attrs,
options = {})
{
  return createTemplate(_extends({

    template_type: 'airline_boardingpass' },
  attrs),

  options);

}

function createAirlineCheckinTemplate(
attrs,
options = {})
{
  return createTemplate(_extends({

    template_type: 'airline_checkin' },
  attrs),

  options);

}

function createAirlineItineraryTemplate(
attrs,
options = {})
{
  return createTemplate(_extends({

    template_type: 'airline_itinerary' },
  attrs),

  options);

}

function createAirlineUpdateTemplate(
attrs,
options = {})
{
  return createTemplate(_extends({

    template_type: 'airline_update' },
  attrs),

  options);

}

function deprecated(name, fn) {
  return (...args) => {
    (0, _warning2.default)(
    false,
    `\`Messenger.${name}\` is deprecated. Use \`Messenger.${
    fn.name
    }\` instead.`);

    return fn(...args);
  };
}

const Messenger = {
  createMessage,
  createText,
  createAttachment,
  createAudio,
  createImage,
  createVideo,
  createFile,
  createTemplate,
  createButtonTemplate,
  createGenericTemplate,
  createListTemplate,
  createOpenGraphTemplate,
  createMediaTemplate,
  createReceiptTemplate,
  createAirlineBoardingPassTemplate,
  createAirlineCheckinTemplate,
  createAirlineItineraryTemplate,
  createAirlineUpdateTemplate,
  createAirlineFlightUpdateTemplate: deprecated(
  'createAirlineFlightUpdateTemplate',
  createAirlineUpdateTemplate) };exports.default =



Messenger;