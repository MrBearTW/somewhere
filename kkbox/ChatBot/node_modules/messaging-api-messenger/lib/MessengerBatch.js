'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};
/* eslint-disable camelcase */
var _warning = require('warning');var _warning2 = _interopRequireDefault(_warning);

var _Messenger = require('./Messenger');var _Messenger2 = _interopRequireDefault(_Messenger);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}





















function omitUndefinedFields(obj) {
  return JSON.parse(JSON.stringify(obj));
}

function sendRequest(body) {
  return {
    method: 'POST',
    relative_url: 'me/messages',
    body };

}

function sendMessage(
idOrRecipient,
msg,
options = {})
{
  const recipient =
  typeof idOrRecipient === 'string' ?
  {
    id: idOrRecipient } :

  idOrRecipient;
  let messageType = 'UPDATE';
  if (options.messaging_type) {
    messageType = options.messaging_type;
  } else if (options.tag) {
    messageType = 'MESSAGE_TAG';
  }

  return sendRequest(_extends({
    messaging_type: messageType,
    recipient,
    message: _Messenger2.default.createMessage(msg, options) },
  omitUndefinedFields(options)));

}

function sendText(
recipient,
text,
options)
{
  return sendMessage(recipient, _Messenger2.default.createText(text, options), options);
}

function sendAttachment(
recipient,
attachment,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createAttachment(attachment, options),
  options);

}
function sendAudio(
recipient,
audio,
options)
{
  return sendMessage(recipient, _Messenger2.default.createAudio(audio, options), options);
}

function sendImage(
recipient,
image,
options)
{
  return sendMessage(recipient, _Messenger2.default.createImage(image, options), options);
}

function sendVideo(
recipient,
video,
options)
{
  return sendMessage(recipient, _Messenger2.default.createVideo(video, options), options);
}

function sendFile(
recipient,
file,
options)
{
  return sendMessage(recipient, _Messenger2.default.createFile(file, options), options);
}

function sendTemplate(
recipient,
payload,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createTemplate(payload, options),
  options);

}

function sendButtonTemplate(
recipient,
text,
buttons,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createButtonTemplate(text, buttons, options),
  options);

}

function sendGenericTemplate(
recipient,
elements,
_ref =






{})
{var _ref$image_aspect_rat = _ref.image_aspect_ratio;let image_aspect_ratio = _ref$image_aspect_rat === undefined ? 'horizontal' : _ref$image_aspect_rat,options = _objectWithoutProperties(_ref, ['image_aspect_ratio']);
  return sendMessage(
  recipient,
  _Messenger2.default.createGenericTemplate(elements, _extends({},
  options, {
    image_aspect_ratio })),

  options);

}

function sendListTemplate(
recipient,
elements,
buttons,
_ref2 =






{})
{var _ref2$top_element_sty = _ref2.top_element_style;let top_element_style = _ref2$top_element_sty === undefined ? 'large' : _ref2$top_element_sty,options = _objectWithoutProperties(_ref2, ['top_element_style']);
  return sendMessage(
  recipient,
  _Messenger2.default.createListTemplate(elements, buttons, _extends({},
  options, {
    top_element_style })),

  options);

}

function sendOpenGraphTemplate(
recipient,
elements,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createOpenGraphTemplate(elements, options),
  options);

}

function sendReceiptTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createReceiptTemplate(attrs, options),
  options);

}

function sendMediaTemplate(
recipient,
elements,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createMediaTemplate(elements, options),
  options);

}

function sendAirlineBoardingPassTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createAirlineBoardingPassTemplate(attrs, options),
  options);

}

function sendAirlineCheckinTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createAirlineCheckinTemplate(attrs, options),
  options);

}

function sendAirlineItineraryTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createAirlineItineraryTemplate(attrs, options),
  options);

}

function sendAirlineUpdateTemplate(
recipient,
attrs,
options)
{
  return sendMessage(
  recipient,
  _Messenger2.default.createAirlineUpdateTemplate(attrs, options),
  options);

}

function getUserProfile(userId) {
  return {
    method: 'GET',
    relative_url: `${userId}` };

}

function sendSenderAction(
idOrRecipient,
action)
{
  const recipient =
  typeof idOrRecipient === 'string' ?
  {
    id: idOrRecipient } :

  idOrRecipient;

  return sendRequest({
    recipient,
    sender_action: action });

}

function typingOn(idOrRecipient) {
  return sendSenderAction(idOrRecipient, 'typing_on');
}

function typingOff(idOrRecipient) {
  return sendSenderAction(idOrRecipient, 'typing_off');
}

function markSeen(idOrRecipient) {
  return sendSenderAction(idOrRecipient, 'mark_seen');
}

function passThreadControl(
recipientId,
targetAppId,
metadata)
{
  return {
    method: 'POST',
    relative_url: 'me/pass_thread_control',
    body: {
      recipient: { id: recipientId },
      target_app_id: targetAppId,
      metadata } };


}

function passThreadControlToPageInbox(recipientId, metadata) {
  return passThreadControl(recipientId, 263902037430900, metadata);
}

function takeThreadControl(recipientId, metadata) {
  return {
    method: 'POST',
    relative_url: 'me/take_thread_control',
    body: {
      recipient: { id: recipientId },
      metadata } };


}

function requestThreadControl(recipientId, metadata) {
  return {
    method: 'POST',
    relative_url: 'me/request_thread_control',
    body: {
      recipient: { id: recipientId },
      metadata } };


}

function associateLabel(userId, labelId) {
  return {
    method: 'POST',
    relative_url: `${labelId}/label`,
    body: {
      user: userId } };


}

function dissociateLabel(userId, labelId) {
  return {
    method: 'DELETE',
    relative_url: `${labelId}/label`,
    body: {
      user: userId } };


}

function getAssociatedLabels(userId) {
  return {
    method: 'GET',
    relative_url: `${userId}/custom_labels` };

}

function deprecated(name, fn) {
  return (...args) => {
    (0, _warning2.default)(
    false,
    `\`MessengerBatch.${name}\` is deprecated. Use \`MessengerBatch.${
    fn.name
    }\` instead.`);

    return fn(...args);
  };
}

const MessengerBatch = {
  // TODO: Remove in v0.8
  createRequest: deprecated('createRequest', sendRequest),
  createMessage: deprecated('createMessage', sendMessage),
  createText: deprecated('createText', sendText),
  createAttachment: deprecated('createAttachment', sendAttachment),
  createAudio: deprecated('createAudio', sendAudio),
  createImage: deprecated('createImage', sendImage),
  createVideo: deprecated('createVideo', sendVideo),
  createFile: deprecated('createFile', sendFile),
  createTemplate: deprecated('createTemplate', sendTemplate),
  createButtonTemplate: deprecated('createButtonTemplate', sendButtonTemplate),
  createGenericTemplate: deprecated(
  'createGenericTemplate',
  sendGenericTemplate),

  createListTemplate: deprecated('createListTemplate', sendListTemplate),
  createOpenGraphTemplate: deprecated(
  'createOpenGraphTemplate',
  sendOpenGraphTemplate),

  createReceiptTemplate: deprecated(
  'createReceiptTemplate',
  sendReceiptTemplate),

  createMediaTemplate: deprecated('createMediaTemplate', sendMediaTemplate),
  createAirlineBoardingPassTemplate: deprecated(
  'createAirlineBoardingPassTemplate',
  sendAirlineBoardingPassTemplate),

  createAirlineCheckinTemplate: deprecated(
  'createAirlineCheckinTemplate',
  sendAirlineCheckinTemplate),

  createAirlineItineraryTemplate: deprecated(
  'createAirlineItineraryTemplate',
  sendAirlineItineraryTemplate),

  createAirlineFlightUpdateTemplate: deprecated(
  'createAirlineFlightUpdateTemplate',
  sendAirlineUpdateTemplate),


  sendAirlineFlightUpdateTemplate: deprecated(
  'sendAirlineFlightUpdateTemplate',
  sendAirlineUpdateTemplate),


  sendRequest,
  sendMessage,
  sendText,
  sendAttachment,
  sendAudio,
  sendImage,
  sendVideo,
  sendFile,
  sendTemplate,
  sendButtonTemplate,
  sendGenericTemplate,
  sendListTemplate,
  sendOpenGraphTemplate,
  sendReceiptTemplate,
  sendMediaTemplate,
  sendAirlineBoardingPassTemplate,
  sendAirlineCheckinTemplate,
  sendAirlineItineraryTemplate,
  sendAirlineUpdateTemplate,

  getUserProfile,

  sendSenderAction,
  typingOn,
  typingOff,
  markSeen,

  passThreadControl,
  passThreadControlToPageInbox,
  takeThreadControl,
  requestThreadControl,

  associateLabel,
  dissociateLabel,
  getAssociatedLabels };exports.default =


MessengerBatch;