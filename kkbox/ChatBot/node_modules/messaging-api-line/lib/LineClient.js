'use strict';Object.defineProperty(exports, "__esModule", { value: true });
var _axios = require('axios');var _axios2 = _interopRequireDefault(_axios);
var _axiosError = require('axios-error');var _axiosError2 = _interopRequireDefault(_axiosError);
var _invariant = require('invariant');var _invariant2 = _interopRequireDefault(_invariant);
var _imageType = require('image-type');var _imageType2 = _interopRequireDefault(_imageType);

var _Line = require('./Line');var _Line2 = _interopRequireDefault(_Line);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}



























function handleError(err) {
  if (err.response && err.response.data) {var _err$response$data =
    err.response.data;const message = _err$response$data.message,details = _err$response$data.details;
    let msg = `LINE API - ${message}`;
    if (details && details.length > 0) {
      details.forEach(detail => {
        msg += `\n- ${detail.property}: ${detail.message}`;
      });
    }
    throw new _axiosError2.default(msg, err);
  }
  throw new _axiosError2.default(err.message, err);
}







class LineClient {
  static connect(
  accessTokenOrConfig,
  channelSecret)
  {
    return new LineClient(accessTokenOrConfig, channelSecret);
  }







  constructor(
  accessTokenOrConfig,
  channelSecret)
  {
    let origin;
    if (accessTokenOrConfig && typeof accessTokenOrConfig === 'object') {
      const config = accessTokenOrConfig;

      this._accessToken = config.accessToken;
      this._channelSecret = config.channelSecret;
      origin = config.origin;
    } else {
      this._accessToken = accessTokenOrConfig;
      this._channelSecret = channelSecret;
    }

    this._axios = _axios2.default.create({
      baseURL: `${origin || 'https://api.line.me'}/`,
      headers: {
        Authorization: `Bearer ${this._accessToken}`,
        'Content-Type': 'application/json' } });


  }

  get axios() {
    return this._axios;
  }

  get accessToken() {
    return this._accessToken;
  }

  _send(
  type,
  target,
  ...args)
  {
    if (type === 'push') {
      return this.push(target, ...args);
    }
    if (type === 'multicast') {
      return this.multicast(target, ...args);
    }
    return this.reply(target, ...args);
  }

  _sendText(
  type,
  target,
  text)
  {
    return this._send(type, target, [_Line2.default.createText(text)]);
  }

  _sendImage(
  type,
  target,
  contentUrlOrImage,
  previewUrl)
  {
    return this._send(type, target, [
    _Line2.default.createImage(contentUrlOrImage, previewUrl)]);

  }

  _sendVideo(
  type,
  target,
  contentUrlOrVideo,
  previewUrl)
  {
    return this._send(type, target, [
    _Line2.default.createVideo(contentUrlOrVideo, previewUrl)]);

  }

  _sendAudio(
  type,
  target,
  contentUrlOrAudio,
  duration)
  {
    return this._send(type, target, [
    _Line2.default.createAudio(contentUrlOrAudio, duration)]);

  }

  _sendLocation(
  type,
  target,
  { title, address, latitude, longitude })
  {
    return this._send(type, target, [
    _Line2.default.createLocation({
      title,
      address,
      latitude,
      longitude })]);


  }

  _sendSticker(
  type,
  target,
  packageIdOrSticker,
  stickerId)
  {
    return this._send(type, target, [
    _Line2.default.createSticker(packageIdOrSticker, stickerId)]);

  }

  /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
  _sendImagemap(
  type,
  target,
  altText,
  {
    baseUrl,
    baseSize,
    baseHeight,
    baseWidth,
    actions })










  {
    return this._send(type, target, [
    _Line2.default.createImagemap(altText, {
      baseUrl,
      baseSize,
      baseHeight,
      baseWidth,
      actions })]);


  }

  /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
  _sendFlex(
  type,
  target,
  altText,
  contents)
  {
    return this._send(type, target, [_Line2.default.createFlex(altText, contents)]);
  }

  /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
  _sendTemplate(
  type,
  target,
  altText,
  template)
  {
    return this._send(type, target, [_Line2.default.createTemplate(altText, template)]);
  }

  _sendButtonTemplate(
  type,
  target,
  altText,
  {
    thumbnailImageUrl,
    imageAspectRatio,
    imageSize,
    imageBackgroundColor,
    title,
    text,
    actions })









  {
    return this._send(type, target, [
    _Line2.default.createButtonTemplate(altText, {
      thumbnailImageUrl,
      imageAspectRatio,
      imageSize,
      imageBackgroundColor,
      title,
      text,
      actions })]);


  }

  _sendConfirmTemplate(
  type,
  target,
  altText,
  {
    text,
    actions })




  {
    return this._send(type, target, [
    _Line2.default.createConfirmTemplate(altText, {
      text,
      actions })]);


  }

  _sendCarouselTemplate(
  type,
  target,
  altText,
  columns,
  {
    imageAspectRatio,
    imageSize } =



  {})
  {
    return this._send(type, target, [
    _Line2.default.createCarouselTemplate(altText, columns, {
      imageAspectRatio,
      imageSize })]);


  }

  _sendImageCarouselTemplate(
  type,
  target,
  altText,
  columns)
  {
    return this._send(type, target, [
    _Line2.default.createImageCarouselTemplate(altText, columns)]);

  }

  /**
     * Reply Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-reply-message
     */
  replyRawBody(body)


  {
    return this._axios.
    post('/v2/bot/message/reply', body).
    then(res => res.data, handleError);
  }

  reply(
  replyToken,
  messages)
  {
    return this.replyRawBody({ replyToken, messages });
  }

  /**
     * Push Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-push-message
     */
  pushRawBody(body)


  {
    return this._axios.
    post('/v2/bot/message/push', body).
    then(res => res.data, handleError);
  }

  push(to, messages) {
    return this.pushRawBody({ to, messages });
  }

  /**
     * Multicast
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-multicast-messages
     */
  multicastRawBody(body)


  {
    return this._axios.
    post('/v2/bot/message/multicast', body).
    then(res => res.data, handleError);
  }

  multicast(
  to,
  messages)
  {
    return this.multicastRawBody({ to, messages });
  }

  /**
     * Content
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-content
     */
  retrieveMessageContent(messageId) {
    return this._axios.
    get(`/v2/bot/message/${messageId}/content`, {
      responseType: 'arraybuffer' }).

    then(res => Buffer.from(res.data), handleError);
  }

  /**
     * Get User Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-profile
     * displayName, userId, pictureUrl, statusMessage
     */
  getUserProfile(userId) {
    return this._axios.
    get(`/v2/bot/profile/${userId}`).
    then(res => res.data, handleError);
  }

  /**
     * Get Group Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-profile
     */
  getGroupMemberProfile(groupId, userId) {
    return this._axios.
    get(`/v2/bot/group/${groupId}/member/${userId}`).
    then(res => res.data, handleError);
  }

  /**
     * Get Room Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-profile
     */
  getRoomMemberProfile(roomId, userId) {
    return this._axios.
    get(`/v2/bot/room/${roomId}/member/${userId}`).
    then(res => res.data, handleError);
  }

  /**
     * Get Group Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-user-ids
     */
  getGroupMemberIds(
  groupId,
  start)
  {
    return this._axios.
    get(
    `/v2/bot/group/${groupId}/members/ids${start ? `?start=${start}` : ''}`).

    then(res => res.data, handleError);
  }

  getAllGroupMemberIds(groupId) {var _this = this;return _asyncToGenerator(function* () {
      let allMemberIds = [];
      let continuationToken;

      do {
        // eslint-disable-next-line no-await-in-loop
        var _ref = yield _this.getGroupMemberIds(
        groupId,
        continuationToken);const memberIds = _ref.memberIds,next = _ref.next;

        allMemberIds = allMemberIds.concat(memberIds);
        continuationToken = next;
      } while (continuationToken);

      return allMemberIds;})();
  }

  /**
     * Get Room Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-user-ids
     */
  getRoomMemberIds(
  roomId,
  start)
  {
    return this._axios.
    get(
    `/v2/bot/room/${roomId}/members/ids${start ? `?start=${start}` : ''}`).

    then(res => res.data, handleError);
  }

  getAllRoomMemberIds(roomId) {var _this2 = this;return _asyncToGenerator(function* () {
      let allMemberIds = [];
      let continuationToken;

      do {
        // eslint-disable-next-line no-await-in-loop
        var _ref2 = yield _this2.getRoomMemberIds(
        roomId,
        continuationToken);const memberIds = _ref2.memberIds,next = _ref2.next;

        allMemberIds = allMemberIds.concat(memberIds);
        continuationToken = next;
      } while (continuationToken);

      return allMemberIds;})();
  }

  /**
     * Leave Group
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-group
     */
  leaveGroup(groupId) {
    return this._axios.
    post(`/v2/bot/group/${groupId}/leave`).
    then(res => res.data, handleError);
  }

  /**
     * Leave Room
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-room
     */
  leaveRoom(roomId) {
    return this._axios.
    post(`/v2/bot/room/${roomId}/leave`).
    then(res => res.data, handleError);
  }

  /**
     * Rich Menu
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#rich-menu
     */
  getRichMenuList() {
    return this._axios.
    get('/v2/bot/richmenu/list').
    then(res => res.data.richmenus, handleError);
  }

  getRichMenu(richMenuId) {
    return this._axios.
    get(`/v2/bot/richmenu/${richMenuId}`).
    then(res => res.data, handleError);
  }

  createRichMenu(richMenu) {
    return this._axios.
    post('/v2/bot/richmenu', richMenu).
    then(res => res.data, handleError);
  }

  deleteRichMenu(richMenuId) {
    return this._axios.
    delete(`/v2/bot/richmenu/${richMenuId}`).
    then(res => res.data, handleError);
  }

  getLinkedRichMenu(userId) {
    return this._axios.
    get(`/v2/bot/user/${userId}/richmenu`).
    then(res => res.data, handleError);
  }

  linkRichMenu(userId, richMenuId) {
    return this._axios.
    post(`/v2/bot/user/${userId}/richmenu/${richMenuId}`).
    then(res => res.data, handleError);
  }

  unlinkRichMenu(userId) {
    return this._axios.
    delete(`/v2/bot/user/${userId}/richmenu`).
    then(res => res.data, handleError);
  }

  /**
     * - Images must have one of the following resolutions: 2500x1686, 2500x843.
     * - You cannot replace an image attached to a rich menu.
     *   To update your rich menu image, create a new rich menu object and upload another image.
     */
  uploadRichMenuImage(richMenuId, image) {
    const type = (0, _imageType2.default)(image);
    (0, _invariant2.default)(
    type && (type.mime === 'image/jpeg' || type.mime === 'image/png'),
    'Image must be `image/jpeg` or `image/png`');

    return this._axios.
    post(`/v2/bot/richmenu/${richMenuId}/content`, image, {
      headers: {
        'Content-Type': type.mime } }).


    then(res => res.data, handleError);
  }

  downloadRichMenuImage(richMenuId) {
    return this._axios.
    get(`/v2/bot/richmenu/${richMenuId}/content`, {
      responseType: 'arraybuffer' }).

    then(res => Buffer.from(res.data), handleError);
  }

  /**
     * Account link
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#account-link
     */

  issueLinkToken(userId) {
    return this._axios.
    post(`/v2/bot/user/${userId}/linkToken`).
    then(res => res.data, handleError);
  }

  /**
     * LINE Front-end Framework (LIFF)
     *
     * https://developers.line.me/en/docs/liff/reference/#add-liff-app
     */
  getLiffAppList() {
    return this._axios.
    get('/liff/v1/apps').
    then(res => res.data.apps, handleError);
  }

  createLiffApp(view) {
    return this._axios.
    post('/liff/v1/apps', view).
    then(res => res.data, handleError);
  }

  updateLiffApp(liffId, view) {
    return this._axios.
    put(`/liff/v1/apps/${liffId}/view`, view).
    then(res => res.data, handleError);
  }

  deleteLiffApp(liffId) {
    return this._axios.
    delete(`/liff/v1/apps/${liffId}`).
    then(res => res.data, handleError);
  }}exports.default = LineClient;


const sendTypes = ['reply', 'push', 'multicast'];

const messageTypes =



[
{ name: 'Text' },
{ name: 'Image' },
{ name: 'Video' },
{ name: 'Audio' },
{ name: 'Location' },
{ name: 'Sticker' },
{ name: 'Imagemap' },
{ name: 'Flex', allowSendTypes: ['reply', 'push'] },
{ name: 'Template' },
{ name: 'ButtonTemplate', aliases: ['ButtonsTemplate'] },
{ name: 'ConfirmTemplate' },
{ name: 'CarouselTemplate' },
{ name: 'ImageCarouselTemplate' }];


messageTypes.forEach(({ name, aliases, allowSendTypes }) => {
  sendTypes.forEach(sendType => {
    if (allowSendTypes && !allowSendTypes.includes(sendType)) {
      return;
    }

    [name].concat(aliases || []).forEach(type => {
      Object.defineProperty(LineClient.prototype, `${sendType}${type}`, {
        enumerable: false,
        configurable: true,
        writable: true,
        value(target, ...args) {
          return this[`_send${name}`](sendType, target, ...args);
        } });

    });
  });
});