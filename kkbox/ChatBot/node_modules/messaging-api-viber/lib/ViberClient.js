'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};


var _axios = require('axios');var _axios2 = _interopRequireDefault(_axios);
var _axiosError = require('axios-error');var _axiosError2 = _interopRequireDefault(_axiosError);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};} /* eslint-disable camelcase */


























/**
https://developers.viber.com/docs/api/rest-bot-api/#viber-rest-api

class ViberClient {
  static connect(
  accessTokenOrConfig,
  sender)
  {
    return new ViberClient(accessTokenOrConfig, sender);
  }







  constructor(accessTokenOrConfig, sender) {
    let origin;
    if (accessTokenOrConfig && typeof accessTokenOrConfig === 'object') {
      const config = accessTokenOrConfig;

      this._token = config.accessToken;
      this._sender = config.sender;
      origin = config.origin;
    } else {
      this._token = accessTokenOrConfig;
      this._sender = sender;
    }

    this._axios = _axios2.default.create({
      baseURL: `${origin || 'https://chatapi.viber.com'}/pa/`,
      headers: {
        'Content-Type': 'application/json',
        'X-Viber-Auth-Token': this._token } });


  }

  get axios() {
    return this._axios;
  }

  get accessToken() {
    return this._token;
  }

  _callAPI(...args) {var _this = this;return _asyncToGenerator(function* () {
      try {
        const response = yield _this._axios.post(...args);const

        data = response.data,config = response.config,request = response.request;

        if (data.status !== 0) {
          throw new _axiosError2.default(`Viber API - ${data.status_message}`, {
            config,
            request,
            response });

        }

        return data;
      } catch (err) {
        throw new _axiosError2.default(err.message, err);
      }})();
  }

  /**
     * Webhooks
     *
     * https://viber.github.io/docs/api/rest-bot-api/#webhooks
     */

  /**
         * Setting a Webhook
         *
         * https://developers.viber.com/docs/api/rest-bot-api/#setting-a-webhook
         */
  setWebhook(url, eventTypes) {
    const body = {
      url };

    if (eventTypes) {
      body.event_types = eventTypes;
    }
    return this._callAPI('/set_webhook', body);
  }

  /**
     * Removing your webhook
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#removing-your-webhook
     */
  removeWebhook() {
    return this.setWebhook('');
  }

  /**
     * Send Message
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#send-message
     */
  sendMessage(receiver, _ref) {let type = _ref.type,options = _objectWithoutProperties(_ref, ['type']);
    return this._callAPI('/send_message', _extends({
      receiver,
      type,
      sender: this._sender },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#text-message
     */
  sendText(receiver, text, options = {}) {
    return this.sendMessage(receiver, _extends({
      type: 'text',
      text },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#picture-message
     */
  sendPicture(
  receiver,
  { text, media, thumbnail },
  options = {})
  {
    return this.sendMessage(receiver, _extends({
      type: 'picture',
      text,
      media,
      thumbnail },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#video-message
     */
  sendVideo(
  receiver,
  { media, size, thumbnail, duration },
  options = {})
  {
    return this.sendMessage(receiver, _extends({
      type: 'video',
      media,
      size,
      thumbnail,
      duration },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#file-message
     */
  sendFile(
  receiver,
  { media, size, file_name },
  options = {})
  {
    return this.sendMessage(receiver, _extends({
      type: 'file',
      media,
      size,
      file_name },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#contact-message
     */
  sendContact(
  receiver,
  { name, phone_number },
  options = {})
  {
    return this.sendMessage(receiver, _extends({
      type: 'contact',
      contact: { name, phone_number } },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#location-message
     */
  sendLocation(
  receiver,
  { lat, lon },
  options = {})
  {
    return this.sendMessage(receiver, _extends({
      type: 'location',
      location: { lat, lon } },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#url-message
     */
  sendURL(receiver, url, options = {}) {
    return this.sendMessage(receiver, _extends({
      type: 'url',
      media: url },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#sticker-message
     */
  sendSticker(receiver, stickerId, options = {}) {
    return this.sendMessage(receiver, _extends({
      type: 'sticker',
      sticker_id: stickerId },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#carousel-content-message
     */
  sendCarouselContent(
  receiver,
  richMedia,
  options = {})
  {
    return this.sendMessage(receiver, _extends({
      type: 'rich_media',
      min_api_version: 2,
      rich_media: richMedia },
    options));

  }

  /**
     * Broadcast Message
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#broadcast-message
     */
  broadcastMessage(broadcastList, _ref2) {let type = _ref2.type,options = _objectWithoutProperties(_ref2, ['type']);
    return this._callAPI('/broadcast_message', _extends({
      broadcast_list: broadcastList,
      type,
      sender: this._sender },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#text-message
     */
  broadcastText(
  broadcastList,
  text,
  options = {})
  {
    return this.broadcastMessage(broadcastList, _extends({
      type: 'text',
      text },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#picture-message
     */
  broadcastPicture(
  broadcastList,
  { text, media, thumbnail },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _extends({
      type: 'picture',
      text,
      media,
      thumbnail },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#video-message
     */
  broadcastVideo(
  broadcastList,
  { media, size, thumbnail, duration },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _extends({
      type: 'video',
      media,
      size,
      thumbnail,
      duration },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#file-message
     */
  broadcastFile(
  broadcastList,
  { media, size, file_name },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _extends({
      type: 'file',
      media,
      size,
      file_name },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#contact-message
     */
  broadcastContact(
  broadcastList,
  { name, phone_number },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _extends({
      type: 'contact',
      contact: { name, phone_number } },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#location-message
     */
  broadcastLocation(
  broadcastList,
  { lat, lon },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _extends({
      type: 'location',
      location: { lat, lon } },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#url-message
     */
  broadcastURL(
  broadcastList,
  url,
  options = {})
  {
    return this.broadcastMessage(broadcastList, _extends({
      type: 'url',
      media: url },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#sticker-message
     */
  broadcastSticker(
  broadcastList,
  stickerId,
  options = {})
  {
    return this.broadcastMessage(broadcastList, _extends({
      type: 'sticker',
      sticker_id: stickerId },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#carousel-content-message
     */
  broadcastCarouselContent(
  broadcastList,
  richMedia,
  options = {})
  {
    return this.broadcastMessage(broadcastList, _extends({
      type: 'rich_media',
      min_api_version: 2,
      rich_media: richMedia },
    options));

  }

  /**
     * Get Account Info
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-account-info
     */
  getAccountInfo() {
    return this._callAPI('/get_account_info', {});
  }

  /**
     * Get User Details
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-user-details
     */
  getUserDetails(id) {var _this2 = this;return _asyncToGenerator(function* () {
      const data = yield _this2._callAPI('/get_user_details', { id });
      return data.user;})();
  }

  /**
     * Get Online
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-online
     */
  getOnlineStatus(ids) {var _this3 = this;return _asyncToGenerator(function* () {
      const data = yield _this3._callAPI('/get_online', { ids });
      return data.users;})();
  }}exports.default = ViberClient;